
h2. Deleting a Patch

	$ hg update patch-C
	0 files updated, 0 files merged, 0 files removed, 0 files unresolved

	$ hg prebase patch-B
	new bases are patch-B

	$ hg pdiff patch-C
	# HG changeset patch
	# User john
	# Date 1220906823 -7200
	yet another patch
	_
	diff --git a/b1 b/b1
	new file mode 100644
	--- /dev/null
	+++ b/b1
	@@ -0,0 +1,2 @@
	+B1
	+More
	diff --git a/file-from-C b/file-from-C
	new file mode 100644
	--- /dev/null
	+++ b/file-from-C
	@@ -0,0 +1,1 @@
	+Three
	diff --git a/main-file-1 b/main-file-1
	--- a/main-file-1
	+++ b/main-file-1
	@@ -5,1 +5,1 @@
	-Three
	+Drei

	$ hg pdelete patch-B1
	$ hg pdiff patch-B1
	$ hg plist


h2. Distributing

	$ cd ../hunksfixed
	 
	$ sed -i main-file-1 -e s/Une/Un/
	$ hg commit --message "backported large change to patch-A"
	created new head

	$ hg sgo patch-C
	updating to patch-B
	4 files updated, 0 files merged, 0 files removed, 0 files unresolved
	merging main-file-1
	warning: conflicts during merge.
	merging main-file-1 failed!
	0 files updated, 0 files merged, 0 files removed, 1 files unresolved
	merging patch-A
	use 'hg resolve' to retry unresolved file merges

	$ cat main-file-1
	<<<<<<< local
	Une
	=======
	Un
	>>>>>>> other
	_
	Deux
	_
	Three

	$ sed -i main-file-1 -e /^\<\<.*/,+4cUn

	$ cat main-file-1
	Un
	_
	Deux
	_
	Three

	$ hg resolve --mark main-file-1
	$ hg commit --message "merge of patch-A"

	$ hg sgo patch-C
	updating to patch-C
	5 files updated, 0 files merged, 0 files removed, 0 files unresolved
	merging main-file-1
	warning: conflicts during merge.
	merging main-file-1 failed!
	0 files updated, 0 files merged, 0 files removed, 1 files unresolved
	merging patch-B
	use 'hg resolve' to retry unresolved file merges

	$ cat main-file-1
	<<<<<<< local
	Une
	=======
	Un
	>>>>>>> other
	_
	Deux
	_
	Trois

	$ sed -i main-file-1 -e /^\<\<.*/,+4cUn

	$ hg resolve --mark main-file-1
	$ hg commit --message "merge of patch-B"

	$ hg glog
	@    17	patch-C: merge of patch-B - john
	|\
	| o    16	patch-B: merge of patch-A - john
	| |\
	| | o  15	patch-A: backported large change to patch-A - john
	| | |
	| o |  14	patch-B: backported large change to patch-B - john
	| | |
	o | |  13	patch-C: large change in patch-C - john
	| | |
	o | |  12	patch-C: dependent change in C - john
	| | |
	o | |  11	patch-C: merge of patch-B - john
	|\| |
	| o |  10	patch-B: merge of patch-A - john
	| |\|
	| | o  9	patch-A: second try in A - john
	| | |
	o | |  8	patch-C: first try in C - john
	| | |
	o | |  7	patch-C: start patch branch patch-C - john
	|/ /
	o |  6	patch-B: second try in B - john
	| |
	o |  5	patch-B: first try in B - john
	| |
	o |  4	patch-B: start patch branch patch-B - john
	|/
	o  3	patch-A: first try in A - john
	|
	o  2	patch-A: start patch branch patch-A - john
	|
	o  1	sparent: initialize stack - john
	|
	o  0	: base - john

	$ hg sdiff patch-A
	# HG changeset patch
	# User john
	# Date 1220010040 -7200
	a nifty patch
	_
	diff --git a/file-from-A b/file-from-A
	new file mode 100644
	--- /dev/null
	+++ b/file-from-A
	@@ -0,0 +1,2 @@
	+One
	+Later
	diff --git a/main-file-1 b/main-file-1
	--- a/main-file-1
	+++ b/main-file-1
	@@ -1,4 +1,4 @@
	-One
	+Un
	 
	 Two
	 

	$ hg sdiff patch-B
	# HG changeset patch
	# User john
	# Date 1220010041 -7200
	another patch
	_
	diff --git a/file-from-B b/file-from-B
	new file mode 100644
	--- /dev/null
	+++ b/file-from-B
	@@ -0,0 +1,1 @@
	+Two
	diff --git a/main-file-1 b/main-file-1
	--- a/main-file-1
	+++ b/main-file-1
	@@ -1,5 +1,5 @@
	 Un
	 
	-Two
	+Deux
	 
	 Three

	$ hg sdiff patch-C
	# HG changeset patch
	# User john
	# Date 1220010041 -7200
	yet another patch
	_
	diff --git a/file-from-A b/file-from-A
	--- a/file-from-A
	+++ b/file-from-A
	@@ -1,2 +1,2 @@
	 One
	-Later
	+EvenLater
	diff --git a/file-from-C b/file-from-C
	new file mode 100644
	--- /dev/null
	+++ b/file-from-C
	@@ -0,0 +1,1 @@
	+Three
	diff --git a/main-file-1 b/main-file-1
	--- a/main-file-1
	+++ b/main-file-1
	@@ -2,4 +2,4 @@
	 
	 Deux
	 
	-Three
	+Trois








h3. Distributing Files To Patches

We happily hack away:

	.$ echo A >>file-from-A
	.$ echo B >>file-from-B
	.$ echo C >>file-from-C

But these changes should really go into the separate patches. So we switch back to patch-A:

	.$ hg sgo patch-A
	saving changes
	updating to patch-A
	2 files updated, 0 files merged, 2 files removed, 0 files unresolved
	at patch patch-A
	restoring changes

This first saved our pending changes by copying them away. Then, after the switch to the target patch, they were restored. So:

	.$ hg stat

	.$ hg diff

Now we commit the first change to patch-A:

	.$ hg commit --message "distributed to A" file-from-A

and just move up to patches B and C and repeat:

	.$ hg sgo patch-B
	.$ hg stat
	.$ hg commit --message "distributed to B" file-from-B

	.$ hg sgo patch-C
	.$ hg stat
	.$ hg commit --message "distributed to C"

resulting in:

	.$ hg glog --limit 7

and:

	.$ hg sdiff --unified 0 patch-A

	.$ hg sdiff --unified 0 patch-B

	.$ hg sdiff --unified 0 patch-C


h3. Distributing Hunks To Patches

Again, we hack away and realize that @main-file-1@ should really be in French, not German. So we do:

	.$ sed -i main-file-1 -e s/Eins/Une/ -e s/Zwei/Deux/ -e s/Drei/Trois/
	.$ cat main-file-1
	Une
	_
	Deux
	_
	Trois

But these changes should again go into the separate patches. Since they all live in the same file, we have to do a bit more work to properly distribute them. We could use the scheme shown above together with @hg record@ to commit just the hunks belonging to each patch.

But a more controlled approach is to save the full changes and then strip them down to just the part that should go into the separate patches. This way we can make sure the patches remain valid (tests run ok, etc.) before we commit.

h5. hg ssave

We do this by saving our work and then incrementally removing things not belonging to a given patch. Let's save our work, then:

	.$ hg ssave
	saved 1 file in patch-C

Now we drop down to patch-B:

	.$ hg sgo patch-B
	.$ hg diff

and remove everything that does not belong to patch-B _and below_. I would normally use a visual differ to compare my working copy against its base revision to do this (@hg meld@ or some such). In the tutorial script, we simulate it by manual reverts:

	.$ sed -i main-file-1 -e/Trois/Three/
	.$ hg diff

Part of the change should even go into patch-A. So we repeat:

	.$ hg ssave
	saved 1 files in patch-B (hiding 1 earlier saves)

The saves form a stack of their own, which we can view:

	.$ hg saves
	saved 1 files in patch-B
	saved 1 files in patch-C

TODO: @hg saves -p@ which shows the patches against their respective base revisions

Now we strip the changes down again for patch-A:

	.$ hg sgo patch-A
	.$ hg diff
	.$ sed -i main-file-1 -e/Deux/Two/
	.$ hg diff

Before committing, we verify (run tests, etc.) and realize there's a typo. After fixing it we commit:

	.$ sed -i main-file-1 -e/Une/Un/
	.$ hg commit --message "split into A"

h5. hg srestore

Now we move back to patch-B and restore the saved changes:

	.$ hg sgo patch-B
	.$ hg srestore
	restored 1 files from patch-B (revealing 1 earlier saves)

Since we had to fix the typo in the original version before committing to patch-A, we need to get this fix back into our restored changes. Normally I would again use the visual differ to port them over. We simulate this here by edits again:

	.$ sed -i main-file-1 -e/Une/Un/
	.$ hg diff

Now we're ready to commit in patch-B, move up to patch-C, port over the typo fix again (sadly, this is repetitive), and commit the remainder of the change:

	.$ hg commit --message "split into B"

	.$ hg sgo patch-C
	.$ hg restore
	restored 1 files from patch-C
	.$ hg diff
	.$ sed -i main-file-1 -e/Une/Un/
	.$ hg diff
	.$ hg commit --message "split into C"


h3. Alternative

	.$ hg spop
	saved 1 files in patch-C
	.$ sed -i main-file-1 -e/Trois/Three/
	.$ hg ssave

	.$ hg sgo patch-A
	saved 1 files in patch-B (hiding 1 earlier saves)
	.$ sed -i main-file-1 -e/Deux/Two/
	.$ hg diff
	.$ sed -i main-file-1 -e/Une/Un/
	.$ hg commit --message "split into A"

	.$ hg sgo patch-B
	restored 1 files from patch-B (revealing 1 earlier saves)
	.$ hg diff
	.$ sed -i main-file-1 -e/Une/Un/
	.$ hg diff
	.$ hg commit --message "split into B"

	.$ hg sgo patch-C
	restored 1 files from patch-C
	.$ hg diff
	.$ sed -i main-file-1 -e/Une/Un/
	.$ hg diff
	.$ hg commit --message "split into C"


h3. Alternative With Auto-Mergeback

	.$ hg spop
	saved 1 files in patch-C
	.$ sed -i main-file-1 -e/Trois/Three/

	.$ hg spop
	saved 1 files in patch-B (hiding 1 earlier saves)
	.$ sed -i main-file-1 -e/Deux/Two/
	.$ hg diff
	.$ hg sfix
	saved 1 files as baseline for patch-A
	.$ sed -i main-file-1 -e/Une/Un/
	.$ hg commit --message "split into A"

	.$ hg spush
	restored 1 files from patch-B (revealing 1 earlier saves)
	.$ hg diff
	.$ hg sfix
	saved 1 files as baseline for patch-B (behind 1 earlier baseline)
	applied fixes against baseline from patch-A (revealing 1 later baseline)
	.$ hg diff
	.$ hg commit --message "split into B"

	.$ hg spush
	restored 1 files from patch-C
	.$ hg diff
	.$ hg sfix
	(no new baseline for want of pending restores)
	applied fixes against baseline from patch-B
	.$ hg diff
	.$ hg commit --message "split into C"


h3. Other direction

Simply @sgo@ to the top patch first, then do as above.



